/**
 * Expense Tracker
 * This is the API routes for Expense Tracker
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ExpenseDetails } from '../model/expenseDetails';
import { ExpenseResponse } from '../model/expenseResponse';
import { GetExpenseResponse } from '../model/getExpenseResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ExpensesService {

    protected basePath = 'http://localhost:5005';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a new Expense
     * Add a new Expense
     * @param body Expense details
     * @param Authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addExpense(body: ExpenseDetails, Authorization: string, observe?: 'body', reportProgress?: boolean): Observable<ExpenseResponse>;
    public addExpense(body: ExpenseDetails, Authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ExpenseResponse>>;
    public addExpense(body: ExpenseDetails, Authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ExpenseResponse>>;
    public addExpense(body: ExpenseDetails, Authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addExpense.');
        }

        if (Authorization === null || Authorization === undefined) {
            throw new Error('Required parameter Authorization was null or undefined when calling addExpense.');
        }

        let headers = this.defaultHeaders;
        if (Authorization !== undefined && Authorization !== null) {
            headers = headers.set('Authorization', String(Authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ExpenseResponse>('post',`${this.basePath}/expenses/add-expense`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete an Expense
     * Delete an Expense
     * @param Authorization 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteExpense(Authorization: string, id?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteExpense(Authorization: string, id?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteExpense(Authorization: string, id?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteExpense(Authorization: string, id?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Authorization === null || Authorization === undefined) {
            throw new Error('Required parameter Authorization was null or undefined when calling deleteExpense.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteExpense.');
        }

        let headers = this.defaultHeaders;
        if (Authorization !== undefined && Authorization !== null) {
            headers = headers.set('Authorization', String(Authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/expenses/delete-expense/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Edit an Expense
     * Edit an Expense
     * @param body 
     * @param id 
     * @param Authorization 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editExpense(body: ExpenseDetails, id?: string, Authorization?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public editExpense(body: ExpenseDetails, id?: string, Authorization?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public editExpense(body: ExpenseDetails, id?: string, Authorization?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public editExpense(body: ExpenseDetails, id?: string, Authorization?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling editExpense.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling editExpense.');
        }


        let headers = this.defaultHeaders;
        if (Authorization !== undefined && Authorization !== null) {
            headers = headers.set('Authorization', String(Authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/expenses/edit-expense/${encodeURIComponent(String(id))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all expenses
     * Get all user expenses
     * @param Authorization 
     * @param page 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getExpenses(Authorization: string, page?: number, observe?: 'body', reportProgress?: boolean): Observable<GetExpenseResponse>;
    public getExpenses(Authorization: string, page?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GetExpenseResponse>>;
    public getExpenses(Authorization: string, page?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GetExpenseResponse>>;
    public getExpenses(Authorization: string, page?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (Authorization === null || Authorization === undefined) {
            throw new Error('Required parameter Authorization was null or undefined when calling getExpenses.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (page !== undefined && page !== null) {
            queryParameters = queryParameters.set('page', <any>page);
        }

        let headers = this.defaultHeaders;
        if (Authorization !== undefined && Authorization !== null) {
            headers = headers.set('Authorization', String(Authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GetExpenseResponse>('get',`${this.basePath}/expenses/get-expenses`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
